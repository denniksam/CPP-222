#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <io.h>  // input-output  -- задачи ввода-вывода

int main() {
    // есть сохраненные "игры" game[n].sav
    // задание: вывести все такие файлы, дать пользователю выбор номера,
    //  открыть соотв. и вывести его на экран
    _finddata_t file_info;
    intptr_t hSearch;
    char pattern[] = "./files/game*.sav";
    hSearch = _findfirst( pattern, &file_info);
    if (hSearch == -1L) {
        std::cout << "Saves not found " << std::endl;
        return -1;
    }
    int search_status;
    do {
        std::cout << file_info.name << std::endl;
        search_status = _findnext( hSearch, &file_info);
    } while (search_status == 0);
    _findclose(hSearch);

    int save_num;
    std::cout << "Enter save number: ";
    std::cin >> save_num;
    // задание: сформировать имя файла "./files/game[save_num].sav"
    char save_filename[260];
    sprintf_s(save_filename, "./files/game%d.sav", save_num);
    // std::cout << save_filename;   // проверка
    // задание: открыть файл для чтения, вывести на экран
    FILE* f = fopen(save_filename, "rt");
    if (!f) {
        std::cout << "Incorrect save number or file unreadable";
        return -1;
    }
    while (!feof(f)) {
        fgets(save_filename, 260, f);  // используем save_filename как буфер чтения
        puts(save_filename);
    }
    fclose(f);

    return 0;
}

int main1()
{
    _finddata_t file_info;      // структура с результатом поиска - информация
                                // о найденном файле
    intptr_t hSearch;           // handle of search - дескриптор поискового ресурса 
                                // дескриптор - системный номер ресурса
    // char pattern[] = "./*x*";           // шаблон поиска (имя содержит "х")
    char pattern[] = "./files/*";       // все файлы из папки files в нашем проекте
    // char pattern[] = "./files/*file*";  // в имени есть "file" в любом месте
    // char pattern[] = "./files/file*";   // начинающиеся на "file"
    // char pattern[] = "./files/*.txt";   // все файлы с расширением "txt"
    // char pattern[] = "./files/page?.htm?";   // page1.htm, page3.html НЕ page2.htmlx

    hSearch = _findfirst(       // Ищем первое совпадение с шаблоном
        pattern,                // и сохраняем возвращенный дескриптор ресурса
        &file_info);            // Указатель на структуру для данных о найденном файле
                               
    if (hSearch == -1L) {       // -1 - признак ошибки, ресурс не был создан или ничего не найдено
        std::cout << "Nothing found like " << pattern << std::endl;
        return -1;              // 
    }                           // 
    int search_status;          // переменная для хранения статуса поиска (итерации)
    do {                        // Т.к. первый поиск уже проведен - сначала
        std::cout               //  выводим, потом повторяем поиск ( do-while )
            << file_info.name   // 
            << ( (file_info.attrib & _A_SUBDIR) ? " DIR" : " FILE")
            << ( (file_info.attrib & _A_RDONLY) ? " w-" : " w+")            
            << "\n";            // 

        search_status =         // Проводим повторный поиск и сохраняем его статус
            _findnext(          // Т.к. поисковый ресурс уже зарегистрирован (создан)
                hSearch,        // вызываем ф-цию _findnext (продолжения поиска)
                &file_info);    // она перезапишет данные в ту же структуру file_info
    }                           // В случае успешного поиска вернет статус 0
    while (search_status == 0); // это будет условием продолжения поиска

    _findclose(hSearch);

    return 0;
}
/*
    Работа с файлами. Часть 2: файловая система
    Файловая система - способ хранения/организации файлов
    NTFS FAT EXT
    Имя файла - основа хранения. Это строка состоящая из
    привязка (якорь)
    ~   директория пользователя (домашняя, users/the_user)
    /   корень текущего диска (вершина иерархии вложенности)
    .   текущая папка
    ..  родительская папка (на 1 уровень вверх)
    C:  корень устройства (по имени)
    далее следуют имена папок (если есть) разделенные символом 
    "/" или "\" (в зависимости от ОС)

    Для поиска файлов применяются спец. символы-шаблонизаторы
    ?   любой символ
    *   любая группа символов
    
    Количество файлов в ОС практически не ограничено, из-за этого
    задачи поиска файлов могут приводить к большим потребностям
    памяти для хранения результатов.
    Поэтому и сама процедура программного поиска файлов представляет
    собой итеративный процесс повторяющегося однократного поиска.
    - задается шаблон поиска (имя файла, возможно, со спецсимволами)
    - создается системный ресурс, управляющий поиском (сканнирующий
       файловую систему). Ресурс проводит первый поиск и останавливается
       на нем (либо возвращает пустой рез-т если ничего не найдено)
    - для поиска следующего результата (совпадения) необходимо
       повторно обратиться к ранее созданному ресурсу, он снова
       остановится на ближайшем совпадении (или пусто)
    - повторный поиск продолжается либо до пустого результата, 
       либо по другим ограничениям.
    - поскольку поиск - системный ресурс, его нужно освободить (закрыть)

Атрибуты файлов
У каждого файла есть набор атрибутов, составленный из перечня возможных:
 - системный файл
 - скрытый файл
 - архивный файл
 - только для чтения
 - папка
 = normal (нет ни одного атрибута)
Результат поиска возвращает совокупность атрибутов файла в виде битовых
"флагов" - единиц в бинарном представлении числа
например,  атрибут   00101  - набор из первого и третьего атрибутов
Наличие атрибута проверяют путем операции "И" с константами атрибутов

file_info.attrib & _A_SUBDIR          01001           00100
  01001              01000            01000           01000
  00100                               ------          ------
                                      01000 (не 0)    00000 (0)
*/
