#include <iostream>
#include "header.h"

int main()
{
    std::cout << "Lesson " << LESSON << "\n";
}
/*
    Git - система контроля версий (https://git-scm.com/)
    Инструмент (набор консольных программ) для создания и управления
      "точками восстановления" состояния проекта.
    Одним из основных терминов является commit - заархивированное
      состояние всех включенных в проект файлов.
    Каждый следующий комит хранит информацию только об изменениях
      по сравнению с предыдущим комитом.
    По традициям Git репозитории должны содержать только код и
      необходимые настройки для него. Не должно быть в репозитории:
      - исполнимых файлов (они собираются из кода)
      - промежуточных фалов компиляции (объектный код)
      - отладочной информации (debug)
      - загруженных пакетов (которые можно загрузить отдельно)
      - конфигураций IDE (пути к файлам, к компиляторам и т.п.)
      - конфиденциальная информация (логины, пароли, ключи)
      полный перечень сильно зависит от языка программирования и 
      среды разработки (IDE)

    Github - сайт, сетевое хранилище репозиториев (https://github.com/)
    Azure DevOps (dev.azure.com) - почта    @student.itstep.org, пароль - от MyStat
    BitBucket (https://bitbucket.org)

    Создание репозитория
    Репозиторием является папка, для того чтобы сделать папку 
     репозиторием, ее надо инициализировать (git init)
    Создаем файл исключений (.gitignore) - текстовый файл
     с перечнем того, что НЕ должно сохраняться в комитах
     как правило, IDE содержат рекомендованные файлы, если нет,
     то образцы можно найти в https://github.com/github/gitignore
     (скачать файл для нужного языка, переименовать в .gitignore
      и поместить в корень папки-репозитория)
    Добавляются файлы в репозиторий (git add ./)
    Создается commit (git commit -m Initial)
    Происходит работа с файлами, по окончании создается следующий
     commit  


*/
